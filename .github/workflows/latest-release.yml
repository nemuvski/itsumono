name: LatestRelease

on:
  # Run a workflow when a release has been released
  # @see https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#release
  release:
    types: [released]

env:
  PNPM_VERSION: 8.6.5

jobs:
  release-utils:
    name: 'Latest release @itsumono/utils'
    # Do not run if the release is a prerelease or draft
    # @see https://docs.github.com/en/webhooks-and-events/webhooks/webhook-events-and-payloads#release
    if: ${{ startsWith(github.event.release.tag_name, 'utils@') && github.event.release.prerelease == false && github.event.release.draft == false }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version-file: '.node-version'
          registry-url: 'https://registry.npmjs.org'

      - name: Current Node.js version
        id: current-node-version
        shell: bash
        run: |
          echo "BUILD_NODE_VERSION=$(node -v | sed 's/^v//i')" >> $GITHUB_OUTPUT

      # Install pnpm
      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # Install dependencies
      - name: Cache restore dependencies
        id: cache-restore-dependencies
        uses: actions/cache/restore@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node${{ steps.current-node-version.outputs.BUILD_NODE_VERSION }}-dependencies-${{ hashFiles('**/pnpm-lock.yaml') }}
      - name: Install dependencies
        if: steps.cache-restore-dependencies.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile --reporter=silent
      - name: Cache save dependencies
        if: steps.cache-restore-dependencies.outputs.cache-hit != 'true'
        id: cache-save-dependencies
        uses: actions/cache/save@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node${{ steps.current-node-version.outputs.BUILD_NODE_VERSION }}-dependencies-${{ hashFiles('**/pnpm-lock.yaml') }}

      # Build and Deploy
      - name: building
        run: npm run build -w @itsumono/utils
      - name: publish
        run: pnpm publish --filter=@itsumono/utils
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  release-react:
    name: 'Latest release @itsumono/react'
    # Do not run if the release is a prerelease or draft
    # @see https://docs.github.com/en/webhooks-and-events/webhooks/webhook-events-and-payloads#release
    if: ${{ startsWith(github.event.release.tag_name, 'react@') && github.event.release.prerelease == false && github.event.release.draft == false }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version-file: '.node-version'
          registry-url: 'https://registry.npmjs.org'

      - name: Current Node.js version
        id: current-node-version
        shell: bash
        run: |
          echo "BUILD_NODE_VERSION=$(node -v | sed 's/^v//i')" >> $GITHUB_OUTPUT

      # Install pnpm
      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # Install dependencies
      - name: Cache restore dependencies
        id: cache-restore-dependencies
        uses: actions/cache/restore@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node${{ steps.current-node-version.outputs.BUILD_NODE_VERSION }}-dependencies-${{ hashFiles('**/pnpm-lock.yaml') }}
      - name: Install dependencies
        if: steps.cache-restore-dependencies.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile --reporter=silent
      - name: Cache save dependencies
        if: steps.cache-restore-dependencies.outputs.cache-hit != 'true'
        id: cache-save-dependencies
        uses: actions/cache/save@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node${{ steps.current-node-version.outputs.BUILD_NODE_VERSION }}-dependencies-${{ hashFiles('**/pnpm-lock.yaml') }}

      # Build and Deploy
      - name: building
        run: npm run build -w @itsumono/react
      - name: publish
        run: pnpm publish --filter=@itsumono/react
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
